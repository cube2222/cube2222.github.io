<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Server on Jacob Martin</title>
    <link>https://kubamartin.com/tags/server/</link>
    <description>Recent content in Server on Jacob Martin</description>
    <image>
      <title>Jacob Martin</title>
      <url>https://kubamartin.com/images/avatar.jpg</url>
      <link>https://kubamartin.com/images/avatar.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 29 Jan 2017 11:24:18 +0000</lastBuildDate><atom:link href="https://kubamartin.com/tags/server/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Practical Golang: Building a simple, distributed one-value database with Hashicorp Serf</title>
      <link>https://kubamartin.com/2017/01/29/practical-golang-building-a-simple-distributed-one-value-database-with-hashicorp-serf/</link>
      <pubDate>Sun, 29 Jan 2017 11:24:18 +0000</pubDate>
      
      <guid>https://kubamartin.com/2017/01/29/practical-golang-building-a-simple-distributed-one-value-database-with-hashicorp-serf/</guid>
      <description>Introduction With the advent of distributed applications, we see new storage solutions emerging constantly.
They include, but are not limited to, Cassandra, Redis, CockroachDB, Consul or RethinkDB.
Most of you probably use one, or more, of them.
They seem to be really complex systems, because they actually are. This can’t be denied.
But it’s pretty easy to write a simple, one value database, featuring high availability.
You probably wouldn’t use anything near this in production, but it should be a fruitful learning experience for you nevertheless.</description>
    </item>
    
    <item>
      <title>Practical Golang: Using Protobuffs</title>
      <link>https://kubamartin.com/2016/05/24/practical-golang-using-protobuffs/</link>
      <pubDate>Tue, 24 May 2016 11:44:26 +0000</pubDate>
      
      <guid>https://kubamartin.com/2016/05/24/practical-golang-using-protobuffs/</guid>
      <description>Introduction Most apps we make need a means of communication. We usually use JSON, or just plain text. JSON has got especially popular because of the rise of Node.js. The truth though, is, that JSON isn’t really a fast format. The marshaller in Go also isn’t that fast. That’s why in this article we’ll learn how to use google protocol buffers. They are in fact very easy to use, and are much faster than JSON.</description>
    </item>
    
  </channel>
</rss>
