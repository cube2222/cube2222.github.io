<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>database on Jacob Martin</title>
    <link>https://jacobmartins.com/tags/database/</link>
    <description>Recent content in database on Jacob Martin</description>
    <image>
      <url>https://jacobmartins.com/images/avatar.jpg</url>
      <link>https://jacobmartins.com/images/avatar.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 29 Jan 2017 11:24:18 +0000</lastBuildDate><atom:link href="https://jacobmartins.com/tags/database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Practical Golang: Building a simple, distributed one-value database with Hashicorp Serf</title>
      <link>https://jacobmartins.com/2017/01/29/practical-golang-building-a-simple-distributed-one-value-database-with-hashicorp-serf/</link>
      <pubDate>Sun, 29 Jan 2017 11:24:18 +0000</pubDate>
      
      <guid>https://jacobmartins.com/2017/01/29/practical-golang-building-a-simple-distributed-one-value-database-with-hashicorp-serf/</guid>
      <description>Introduction With the advent of distributed applications, we see new storage solutions emerging constantly.
They include, but are not limited to, Cassandra, Redis, CockroachDB, Consul or RethinkDB.
Most of you probably use one, or more, of them.
They seem to be really complex systems, because they actually are. This can’t be denied.
But it’s pretty easy to write a simple, one value database, featuring high availability.
You probably wouldn’t use anything near this in production, but it should be a fruitful learning experience for you nevertheless.</description>
    </item>
    
    <item>
      <title>Web app using Microservices in Go: Part 2 – k/v store and Database</title>
      <link>https://jacobmartins.com/2016/03/16/web-app-using-microservices-in-go-part-2-kv-store-and-database/</link>
      <pubDate>Wed, 16 Mar 2016 12:30:40 +0000</pubDate>
      
      <guid>https://jacobmartins.com/2016/03/16/web-app-using-microservices-in-go-part-2-kv-store-and-database/</guid>
      <description>Previous part
Introduction In this part we will implement part of the microservices needed for our web app. We will implement the:
 key-value store Database  This will be a pretty code heavy tutorial so concentrate and have fun!
The key-value store Design The design hasn’t changed much. We will save the key-value pairs as a global map, and create a global mutex for concurrent access. We’ll also add the ability to list all key-value pairs for debugging/analytical purposes.</description>
    </item>
    
  </channel>
</rss>
