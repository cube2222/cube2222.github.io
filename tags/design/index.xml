<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>design on Jacob Martin</title>
    <link>https://examplesite.com/tags/design/</link>
    <description>Recent content in design on Jacob Martin</description>
    <image>
      <url>https://examplesite.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://examplesite.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 23 Mar 2016 13:34:03 +0000</lastBuildDate><atom:link href="https://examplesite.com/tags/design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web app using Microservices in Go: Part 4 – Worker and Frontend</title>
      <link>https://examplesite.com/2016/03/23/web-app-using-microservices-in-go-part-4-worker-and-frontend/</link>
      <pubDate>Wed, 23 Mar 2016 13:34:03 +0000</pubDate>
      
      <guid>https://examplesite.com/2016/03/23/web-app-using-microservices-in-go-part-4-worker-and-frontend/</guid>
      <description>Previous part
Introduction In this part we will finally finish writing our application. We will implement the last two services:
 The Worker The Frontend  The Worker The worker will communicate with the Master to get new Tasks. When it gets a Task it will get the corresponding data from the storage and will start working on the task. When it finishes it will send the finished data to the storage service, and if that succeeds it will register the Task as finished to the Master.</description>
    </item>
    
    <item>
      <title>Web app using Microservices in Go: Part 1 – Design</title>
      <link>https://examplesite.com/2016/03/14/web-app-using-microservices-in-go-part-1-design/</link>
      <pubDate>Mon, 14 Mar 2016 14:19:19 +0000</pubDate>
      
      <guid>https://examplesite.com/2016/03/14/web-app-using-microservices-in-go-part-1-design/</guid>
      <description>Introduction Recently it’s a constantly repeated buzzword – Microservices. You can love ’em or hate ’em, but you really shouldn’t ignore ’em. In this short series we’ll create a web app using a microservice architecture. We’ll try not to use 3rd party tools and libraries. Remember though that when creating a production web app it is highly recommended to use 3rd party libraries (even if only to save you time).</description>
    </item>
    
  </channel>
</rss>
