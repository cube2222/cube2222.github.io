<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Go on Jacob Martin</title>
    <link>https://cube2222.github.io/categories/go/</link>
    <description>Recent content in Go on Jacob Martin</description>
    <image>
      <url>https://cube2222.github.io/images/avatar.jpg</url>
      <link>https://cube2222.github.io/images/avatar.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 29 Jan 2017 11:24:18 +0000</lastBuildDate><atom:link href="https://cube2222.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Practical Golang: Building a simple, distributed one-value database with Hashicorp Serf</title>
      <link>https://cube2222.github.io/2017/01/29/practical-golang-building-a-simple-distributed-one-value-database-with-hashicorp-serf/</link>
      <pubDate>Sun, 29 Jan 2017 11:24:18 +0000</pubDate>
      
      <guid>https://cube2222.github.io/2017/01/29/practical-golang-building-a-simple-distributed-one-value-database-with-hashicorp-serf/</guid>
      <description>Introduction With the advent of distributed applications, we see new storage solutions emerging constantly.
They include, but are not limited to, Cassandra, Redis, CockroachDB, Consul or RethinkDB.
Most of you probably use one, or more, of them.
They seem to be really complex systems, because they actually are. This can’t be denied.
But it’s pretty easy to write a simple, one value database, featuring high availability.
You probably wouldn’t use anything near this in production, but it should be a fruitful learning experience for you nevertheless.</description>
    </item>
    
    <item>
      <title>Practical Golang: Getting started with NATS and related patterns</title>
      <link>https://cube2222.github.io/2016/06/06/practical-golang-getting-started-with-nats-and-related-patterns/</link>
      <pubDate>Mon, 06 Jun 2016 11:51:48 +0000</pubDate>
      
      <guid>https://cube2222.github.io/2016/06/06/practical-golang-getting-started-with-nats-and-related-patterns/</guid>
      <description>Practical Golang: Getting started with NATS and related patterns Introduction Microservices… the never disappearing buzzword of our times. They promise a lot, but can be slow or complicated if not implemented correctly. One of the main challenges when developing and using a microservice-based architecture is getting the communication right. Many will ask, why not REST? As I did at some point. Many will actually use it. But the truth is that it leads to tighter coupling, and is synchronous.</description>
    </item>
    
    <item>
      <title>Practical Golang: Using Protobuffs</title>
      <link>https://cube2222.github.io/2016/05/24/practical-golang-using-protobuffs/</link>
      <pubDate>Tue, 24 May 2016 11:44:26 +0000</pubDate>
      
      <guid>https://cube2222.github.io/2016/05/24/practical-golang-using-protobuffs/</guid>
      <description>Introduction Most apps we make need a means of communication. We usually use JSON, or just plain text. JSON has got especially popular because of the rise of Node.js. The truth though, is, that JSON isn’t really a fast format. The marshaller in Go also isn’t that fast. That’s why in this article we’ll learn how to use google protocol buffers. They are in fact very easy to use, and are much faster than JSON.</description>
    </item>
    
    <item>
      <title>Practical Golang: Writing a simple login middleware</title>
      <link>https://cube2222.github.io/2016/04/06/practical-golang-writing-a-simple-login-middleware/</link>
      <pubDate>Wed, 06 Apr 2016 11:08:18 +0000</pubDate>
      
      <guid>https://cube2222.github.io/2016/04/06/practical-golang-writing-a-simple-login-middleware/</guid>
      <description>Introduction In this part we’ll be creating a simple middleware you can easily apply to your handlers to get authentication/authorization. Middleware like this is an awesome way to add additional functionality to your Go server. Here we will only do authorization as we will only ask for a password, not a login. Although if you want, then you can easily extend this system to any authentication/authorization you’d like.
Implementation We will mainly use the stdlib, and will use cookies to remember who’s already logged in.</description>
    </item>
    
    <item>
      <title>Web app using Microservices in Go: Part 4 – Worker and Frontend</title>
      <link>https://cube2222.github.io/2016/03/23/web-app-using-microservices-in-go-part-4-worker-and-frontend/</link>
      <pubDate>Wed, 23 Mar 2016 13:34:03 +0000</pubDate>
      
      <guid>https://cube2222.github.io/2016/03/23/web-app-using-microservices-in-go-part-4-worker-and-frontend/</guid>
      <description>Previous part
Introduction In this part we will finally finish writing our application. We will implement the last two services:
 The Worker The Frontend  The Worker The worker will communicate with the Master to get new Tasks. When it gets a Task it will get the corresponding data from the storage and will start working on the task. When it finishes it will send the finished data to the storage service, and if that succeeds it will register the Task as finished to the Master.</description>
    </item>
    
    <item>
      <title>Web app using Microservices in Go: Part 3 – Storage and Master</title>
      <link>https://cube2222.github.io/2016/03/21/web-app-using-microservices-in-go-part-3-storage-and-master/</link>
      <pubDate>Mon, 21 Mar 2016 13:25:39 +0000</pubDate>
      
      <guid>https://cube2222.github.io/2016/03/21/web-app-using-microservices-in-go-part-3-storage-and-master/</guid>
      <description>Previous part
Introduction In this part we will implement the next part of the microservices needed for our web app. We will implement the:
 Storage system Master  This way we will have the Master API ready when we’ll be writing the slaves/workers and the frontend. And we’ll already have the database, k/v store and storage when writing the master. SO every time we write something we’ll already have all its dependencies.</description>
    </item>
    
    <item>
      <title>Web app using Microservices in Go: Part 2 – k/v store and Database</title>
      <link>https://cube2222.github.io/2016/03/16/web-app-using-microservices-in-go-part-2-kv-store-and-database/</link>
      <pubDate>Wed, 16 Mar 2016 12:30:40 +0000</pubDate>
      
      <guid>https://cube2222.github.io/2016/03/16/web-app-using-microservices-in-go-part-2-kv-store-and-database/</guid>
      <description>Previous part
Introduction In this part we will implement part of the microservices needed for our web app. We will implement the:
 key-value store Database  This will be a pretty code heavy tutorial so concentrate and have fun!
The key-value store Design The design hasn’t changed much. We will save the key-value pairs as a global map, and create a global mutex for concurrent access. We’ll also add the ability to list all key-value pairs for debugging/analytical purposes.</description>
    </item>
    
    <item>
      <title>Web app using Microservices in Go: Part 1 – Design</title>
      <link>https://cube2222.github.io/2016/03/14/web-app-using-microservices-in-go-part-1-design/</link>
      <pubDate>Mon, 14 Mar 2016 14:19:19 +0000</pubDate>
      
      <guid>https://cube2222.github.io/2016/03/14/web-app-using-microservices-in-go-part-1-design/</guid>
      <description>Introduction Recently it’s a constantly repeated buzzword – Microservices. You can love ’em or hate ’em, but you really shouldn’t ignore ’em. In this short series we’ll create a web app using a microservice architecture. We’ll try not to use 3rd party tools and libraries. Remember though that when creating a production web app it is highly recommended to use 3rd party libraries (even if only to save you time).</description>
    </item>
    
    <item>
      <title>Practical Golang: Using Google Drive and Calendar</title>
      <link>https://cube2222.github.io/2016/03/08/practical-golang-using-google-drive-and-calendar/</link>
      <pubDate>Tue, 08 Mar 2016 13:47:01 +0000</pubDate>
      
      <guid>https://cube2222.github.io/2016/03/08/practical-golang-using-google-drive-and-calendar/</guid>
      <description>Introduction Integrating Google services into your app can lead to a lot of nice features for your users, and can create a seamless experience for them. In this tutorial we’ll learn how to use the most useful functionalities of Google Calendar and Google Drive.
The theory To begin with, we should understand the methodology of using the Google API in Golang. For most of their API’s I’ve skimmed through it works like that:</description>
    </item>
    
    <item>
      <title>Practical Golang: Using websockets</title>
      <link>https://cube2222.github.io/2016/03/07/practical-golang-using-websockets/</link>
      <pubDate>Mon, 07 Mar 2016 13:23:50 +0000</pubDate>
      
      <guid>https://cube2222.github.io/2016/03/07/practical-golang-using-websockets/</guid>
      <description>Introduction This is the first post in the practical Golang series. Posts in it are meant to provide short and informative introductions to various topics.
This one is a about websockets, which are an awesome and easy way to provide communication between your web app and server.
Here we will use the gorilla websocket library, but you could also use a few others.
We will create two basic apps which should cover most day to day usage:</description>
    </item>
    
    <item>
      <title>Getting started with OAuth2 in Go</title>
      <link>https://cube2222.github.io/2016/02/29/getting-started-with-oauth2-in-go/</link>
      <pubDate>Mon, 29 Feb 2016 14:02:02 +0000</pubDate>
      
      <guid>https://cube2222.github.io/2016/02/29/getting-started-with-oauth2-in-go/</guid>
      <description>Introduction Authentication is usually a crucial part in any web app. You could always roll your own authentication mechanics if you wanted, however, this creates an additional barrier between the user and your web app: Registration.
That’s why OAuth, and earlier OAuth2, was created. It makes it much more convenient to log in to your app, because the user can log in with one of the many accounts he already has.</description>
    </item>
    
  </channel>
</rss>
